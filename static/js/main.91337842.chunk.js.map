{"version":3,"sources":["components/Navbar/Navbar.js","components/Footer/Footer.js","components/Header/Header.js","components/Container/Container.js","components/Wrapper/Wrapper.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","class","id","score","highscore","Footer","Header","style","backgroundImage","concat","children","Container","Object","assign","fluid","Wrapper","Card","onClick","clickCount","alt","name","src","image","App","state","cards","gameOver","_this","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","_this2","Wrapper_Wrapper","components_Navbar_Navbar","Header_Header","Container_Container","map","components_Card_Card","key","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"8pCAeeA,EAbA,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAIC,MAAM,cAAlB,eACAL,EAAAC,EAAAC,cAAA,MAAII,GAAG,aAAaH,UAAU,8BAC5BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,UAA+BJ,EAAMQ,MAArC,gBAAyDR,EAAMS,qBCSxDC,MAbf,WACI,OACIT,EAAAC,EAAAC,cAAA,UAAQG,MAAM,mCACZL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,oBACTL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,aAAX,2BAEAL,EAAAC,EAAAC,cAAA,KAAGG,MAAM,iCAAiCD,KAAK,kDAA/C,0BCEGM,MARf,SAAgBX,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOQ,MAAO,CAAEC,gBAAe,OAAAC,OAASd,EAAMa,gBAAf,OAC3Cb,EAAMe,WCAEC,MAJf,SAAmBhB,GACjB,OAAOC,EAAAC,EAAAC,cAAA,MAAAc,OAAAC,OAAA,CAAKd,UAAS,YAAAU,OAAcd,EAAMmB,MAAQ,SAAW,KAAUnB,WCIzDoB,MAJf,SAAiBpB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAAc,OAAAC,OAAA,CAAMd,UAAU,WAAcJ,YCOtBqB,SARJ,SAAArB,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOkB,QAAS,kBAAMtB,EAAMuB,WAAWvB,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKqB,IAAKxB,EAAMyB,KAAMC,IAAK1B,EAAM2B,YCwE1BC,oNAnEbC,MAAQ,CACNC,QACAtB,MAAO,EACPC,UAAW,KAGfsB,SAAW,WAWT,OAVIC,EAAKH,MAAMrB,MAAQwB,EAAKH,MAAMpB,WAChCuB,EAAKC,SAAS,CAACxB,UAAWuB,EAAKH,MAAMrB,OAAQ,WAC3C0B,QAAQC,IAAIC,KAAKP,MAAMpB,aAG3BuB,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAO,IAEdC,MAAK,0BAAA1B,OAA2BkB,EAAKH,MAAMrB,QAC3CwB,EAAKC,SAAS,CAACzB,MAAO,KACf,KAGTe,WAAa,SAAAhB,GACXyB,EAAKH,MAAMC,MAAMW,KAAK,SAACC,EAAGC,GACxB,GAAGD,EAAEnC,KAAKA,EAAG,CACX,GAAuB,IAAnBuB,EAAMa,GAAGJ,MAMX,OALAT,EAAMa,GAAGJ,MAAQT,EAAMa,GAAGJ,MAAQ,EAClCP,EAAKC,SAAS,CAACzB,MAAQwB,EAAKH,MAAMrB,MAAQ,GAAI,WAC5C0B,QAAQC,IAAIC,KAAKP,MAAMrB,SAEzBwB,EAAKH,MAAMC,MAAMc,KAAK,kBAAMC,KAAKC,SAAS,MACnC,EAEPd,EAAKD,uFAOJ,IAAAgB,EAAAX,KACP,OACEnC,EAAAC,EAAAC,cAAC6C,EAAD,KACA/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAQzC,MAAO4B,KAAKP,MAAMrB,MAAOC,UAAW2B,KAAKP,MAAMpB,YACvDR,EAAAC,EAAAC,cAAC+C,EAAD,CAAQrC,gBAAgB,mCACpBZ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,yEAEJF,EAAAC,EAAAC,cAACgD,EAAD,KACGf,KAAKP,MAAMC,MAAMsB,IAAI,SAAAd,GAAI,OACtBrC,EAAAC,EAAAC,cAACkD,EAAD,CACE9B,WAAYwB,EAAKxB,WACjBhB,GAAI+B,EAAK/B,GACT+C,IAAKhB,EAAK/B,GACVoB,MAAOW,EAAKX,WAKpB1B,EAAAC,EAAAC,cAACoD,EAAD,cA1DcC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.91337842.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = props => (\r\n<nav>\r\n    <div className=\"nav-wrapper  blue-grey darken-1\">\r\n      <a href=\"#\" class=\"brand-logo\">Clicky Game</a>\r\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n        <li className=\"scores\">Score: {props.score} | Highscore:{props.highscore}</li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\n\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer class=\"page-footer  blue-grey darken-1\">\r\n          <div class=\"footer-copyright\">\r\n            <div class=\"container\">\r\n            Â© 2019 Copyright Text\r\n            <a class=\"grey-text text-lighten-4 right\" href=\"https://vianeycadena.github.io/Portfolio_2019/\">My Portfolio</a>\r\n            </div>\r\n          </div>\r\n        </footer>       \r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"hero\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\"; \r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  export default Card;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\nimport Container from \"./components/Container/Container\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport cards from \"./cards.json\";\nimport Card from \"./components/Card/Card\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\ngameOver = () => {\n  if (this.state.score > this.state.highscore) {\n    this.setState({highscore: this.state.score}, function() {\n      console.log(this.state.highscore)\n    });\n  }\n  this.state.cards.forEach(card => {\n    card.count= 0;\n  });\n  alert(`Game Over :( \\n score: ${this.state.score}`);\n  this.setState({score: 0});\n  return true;\n}\n\nclickCount = id => {\n  this.state.cards.find((o, i) => {\n    if(o.id===id){\n      if (cards[i].count === 0) {\n        cards[i].count = cards[i].count + 1;\n        this.setState({score : this.state.score + 1}, function(){\n          console.log(this.state.score);\n        });\n        this.state.cards.sort(() => Math.random()-0.5)\n        return true;\n      } else{\n        this.gameOver();\n      }\n    }\n  })\n}\n\n\nrender() {\n  return (\n    <Wrapper>\n    <Navbar score={this.state.score} highscore={this.state.highscore} />\n    <Header backgroundImage=\"https://i.imgur.com/bGXAvEf.jpg\">\n        <h1>Clicky Game</h1>\n        <h3>Test for designers, don't click the same pantone two times</h3>\n      </Header>\n    <Container>\n      {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Container>\n      \n    <Footer />\n    </Wrapper>\n  );\n}\n}\n\n\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}